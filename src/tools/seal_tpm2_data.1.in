[name]
seal_tpm2_data - seal a blob of data for a TPM

[description]

Used to create a sealed blob of data which can be unsealed via the
TPM.  Possible uses for this blob of data include as a symmetric key,
which is the use in the linux kernel trusted key infrastructure.

[PCR Values]

The PCR values are specified as

 <bank>:<list>

Where <bank> is any supported PCR hash bank and list specifies the
PCRs to lock the key to as both comma separated individual values as
well as comma separated ranges.  So

 sha256:1,3 means PCRs 1 and 3 in the sha256 bank

 sha512:1,3-5 means PCRs 1,3,4 and 5 in the sha512 bank

[Import]

In some cases, there may be a need to wrap a key without access to the
TPM it will be use on.  For these cases an importable key may be
specified with the --import option.  For this to work, you must use a
public key corresponding exactly to the one the importing TPM will use
(Note: only Elliptic Curve parents are currently supported).  For
instance the owner seed elliptic curve storage key may be produced as

tsscreateprimary -hi o -st -ecc nistp256 -opem parent.pub

Then a sealed data file may be wrapped to the TPM via:

echo "data" | seal_tpm2_data --import parent.pub seal.tpm

Note that certain parameters must be assumed about a parent when it is
wrapped, like the template (must be standard restricted decryption
key) and the name hash (must be sha256).

[Secrets in Other Objects]

When the option --secrets <handle> is used, it creates a sealed blob
whose authorization password is conditioned on the password of a
different object identified by <handle>.  Usually this is a permanent
NV index, but could be any object.  The design of this policy is to
allow the password to be changed without updating the sealed blob
(simply by changing the authorization of the other object).  Because
most unseal applications can only request a single password, blobs
with a --secret policy may not additionally have an --auth option to
also require passing in the password embedded in the blob.

[Signed Policies]

When the option --signed-policy <key> is used, it creates a sealed
blob whose policy can be extended by anyone possessing the private
part of <key>.  The <key> presented must be a public key (so the owner
of the private key doesn't have to be the owner of the created tpm
sealed blob).

Note that sealed blobs created with --signed-policy cannot be used
until at least one signed policy is added.

[examples]

Create a sealed data blob to the storage parent (owner hierarchy)

    echo somedatatoseal | seal_tpm2_key -p owner seal.tpm

Unseal the data

    unseal_tpm2_key seal.tpm
