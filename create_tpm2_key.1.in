[name]
create_tpm2_key - create tpm2 loadable key

[description]

Can be used to create a TPM loadable representation of a private key.
The key is either internal to the TPM or wrapped from an existing
private key.

Note that this command can now create two different types of keys:
importable and loadable (the default type being loadable).  The
difference between the two is that the creation of loadable keys
requires the presence of the actual TPM the key will be loaded on.  An
importable key can be created without any TPM contact provided you
have the public key of the parent the new key will be imported to.

[files]

Policy File Format

The policy file should contain a rule for each line, where rules
can be generated for example with the tsspolicymakerpcr tool from IBM TSS.

Example (PolicyPCR):

$ tsspolicymakerpcr -bm 10000 -if policypcr16aaasha256.txt -v -pr -of policies/policypcr.txt >> policy.txt

where policypcr16aaasha256.txt contains the desired value of PCR 16.

Example (PolicyAuthValue):

$ echo 0000016b >> policy.txt

[PCR Values]

The PCR values are specified as

 <bank>:<list>

Where <bank> is any supported PCR hash bank and list specifies the
PCRs to lock the key to as both comma separated individual values as
well as comma separated ranges.  So

 sha256:1,3 means PCRs 1 and 3 in the sha256 bank

 sha512:1,3-5 means PCRs 1,3,4 and 5 in the sha512 bank

[Signed Policies]

When the option --signed-policy <key> is used, it creates a key whose
policy can be extended by anyone possessing the private part of <key>.
The <key> presented must be a public key (so the owner of the private
key doesn't have to be the owner of the created tpm key).

Note that keys created with --signed-policy cannot be used until at
least one signed policy is added.

[examples]

Create a self-signed cert using the TPM engine:

0. Good practice is to generate the RSA version of the primary storage
   seed and place it at well known location 81000001 (Microsoft Spec).
   To do this, you need to manipulate the non resource manager
   interface so the keys aren't lost when the process dies:

 # TPM_DEVICE=/dev/tpm0 tsscreateprimary -hi o -st -rsa
 Handle 80000000
 # TPM_DEVICE=/dev/tpm0 tssevictcontrol -hi o -ho 80000000 -hp 81000001
 # TPM_DEVICE=/dev/tpm0 tssflushcontext -ha 80000000

   where 80000000 is the the handle and is always returned by the
   first command. You must do the final tssflushcontext otherwise the
   transient key won't get flushed since you used the non resource
   manager interface.

   Note: tsscreateprimary will take a while to run (50s on my laptop)
   while the TPM derivces an RSA key from the primary seed.  This long
   time is why you want to store a permanent copy of the derived key.

1. Generate an external key and wrap it for the TPM:
 $ openssl genrsa 2048 > <private key>
 $ create_tpm2_key -w <private key> [-p 81000001] <key file>

   Note: specifying the parent is optional (and you need to have
   created it in step 0) but if you leave it out, the key will still
   end up parented to the primary storage seed and the TPM will have
   to re-derive the ECC version of that seed each time you use it

   Note: because the RSA private key is sent to the TPM encrypted, the
   tss has to have access to the public part of the parent key (if you
   didn't specify a parent, this public part will be created when the
   parent key is derived from the storage primary seed), so you may
   need to do tssreadpublic -p 81000001 before it will work.

2. Make the openssl certificate request:
 $ openssl req -keyform engine -engine tpm2 -key <key file> -new -x509 -days 365 -out <certfilename>

3. Test using openssl:
 $ openssl s_server -cert <certfilename> -www -accept 4433 -keyform engine -engine tpm2 -key <keyfilename>

Creating an importable key:

1. First get the public key of the storage primary seed (as an elliptic
   curve key):
  $ tsscreateprimary -ecc nistp256 -hi o -opem srk.pub

2. Once you have this public key, you can export it anywhere and do the
   key wrapping
  $ create_tpm2_key --import srk.pub --wrap my_key.priv my_key.tpm
